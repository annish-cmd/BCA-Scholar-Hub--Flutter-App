import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../utils/theme_provider.dart';
import '../services/notice_service.dart';
import '../models/notice.dart';
import 'package:logger/logger.dart';

class AddNoticeScreen extends StatefulWidget {
  final Notice? notice; // For editing existing notice
  
  const AddNoticeScreen({super.key, this.notice});

  @override
  State<AddNoticeScreen> createState() => _AddNoticeScreenState();
}

class _AddNoticeScreenState extends State<AddNoticeScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _contentController = TextEditingController();
  final _tagsController = TextEditingController();
  final Logger _logger = Logger();
  
  bool _isImportant = false;
  bool _isLoading = false;
  String? _imageUrl;
  NoticePriority _priority = NoticePriority.normal;
  NoticeCategory _category = NoticeCategory.general;
  bool _isEditing = false;

  @override
  void initState() {
    super.initState();
    if (widget.notice != null) {
      _isEditing = true;
      _titleController.text = widget.notice!.title;
      _contentController.text = widget.notice!.content;
      _tagsController.text = widget.notice!.tags.join(', ');
      _isImportant = widget.notice!.isImportant;
      _imageUrl = widget.notice!.imageUrl;
      _priority = widget.notice!.priority;
      _category = widget.notice!.category;
    }
  }

  @override
  void dispose() {
    _titleController.dispose();
    _contentController.dispose();
    _tagsController.dispose();
    super.dispose();
  }

  Future<void> _submitNotice() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    try {
      final userInfo = NoticeService.getCurrentUserInfo();
      
      if (_isEditing) {
        // Update existing notice
        final updatedNotice = widget.notice!.copyWith(
          title: _titleController.text.trim(),
          content: _contentController.text.trim(),
          isImportant: _isImportant,
          imageUrl: _imageUrl,
          priority: _priority,
          category: _category,
          tags: _tagsController.text.trim().isEmpty 
              ? [] 
              : _tagsController.text.trim().split(',').map((tag) => tag.trim()).toList(),
          updatedAt: DateTime.now(),
        );

        await NoticeService.updateNotice(widget.notice!.id, updatedNotice);
      } else {
        // Create new notice
        final notice = Notice(
          id: '', // Will be generated by Firebase
          title: _titleController.text.trim(),
          content: _contentController.text.trim(),
          authorId: userInfo['id']!,
          authorName: userInfo['name']!,
          createdAt: DateTime.now(),
          isImportant: _isImportant,
          imageUrl: _imageUrl,
          priority: _priority,
          category: _category,
          tags: _tagsController.text.trim().isEmpty 
              ? [] 
              : _tagsController.text.trim().split(',').map((tag) => tag.trim()).toList(),
        );

        await NoticeService.addNotice(notice);
      }
      
      _logger.i('Notice ${_isEditing ? 'updated' : 'added'} successfully');
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Notice ${_isEditing ? 'updated' : 'added'} successfully!'),
            backgroundColor: Colors.green,
            duration: const Duration(seconds: 2),
          ),
        );
        
        // Navigate back
        Navigator.pop(context);
      }
    } catch (e) {
      _logger.e('Error adding notice:', error: e);
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error adding notice: ${e.toString()}'),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 3),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final themeProvider = Provider.of<ThemeProvider>(context);
    final isDarkMode = themeProvider.isDarkMode;
    final textColor = isDarkMode ? Colors.white : Colors.black;

    return Scaffold(
      backgroundColor: isDarkMode 
          ? const Color(0xFF121212) 
          : Colors.grey[50],
      appBar: AppBar(
        title: const Text(
          'Add Notice',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 20,
          ),
        ),
        backgroundColor: isDarkMode ? const Color(0xFF1F1F1F) : Colors.blue,
        foregroundColor: Colors.white,
        elevation: 0,
        centerTitle: true,
        actions: [
          if (_isLoading)
            const Padding(
              padding: EdgeInsets.all(16.0),
              child: SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
              ),
            ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Header Card
              Container(
                width: double.infinity,
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: isDarkMode
                        ? [Colors.blue[800]!, Colors.purple[800]!]
                        : [Colors.blue[400]!, Colors.purple[400]!],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      blurRadius: 10,
                      offset: const Offset(0, 4),
                    ),
                  ],
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Icon(
                      Icons.campaign,
                      color: Colors.white,
                      size: 32,
                    ),
                    const SizedBox(height: 12),
                    Text(
                      _isEditing ? 'Edit Notice' : 'Create New Notice',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Share important information with the community',
                      style: TextStyle(
                        color: Colors.white.withOpacity(0.9),
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
              ),

              const SizedBox(height: 24),

              // Title Field
              _buildSectionTitle('Notice Title', isDarkMode, textColor),
              const SizedBox(height: 8),
              _buildTextField(
                controller: _titleController,
                hintText: 'Enter notice title...',
                maxLines: 1,
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Please enter a title';
                  }
                  if (value.trim().length < 5) {
                    return 'Title must be at least 5 characters';
                  }
                  return null;
                },
                isDarkMode: isDarkMode,
              ),

              const SizedBox(height: 20),

              // Content Field
              _buildSectionTitle('Notice Content', isDarkMode, textColor),
              const SizedBox(height: 8),
              _buildTextField(
                controller: _contentController,
                hintText: 'Write your notice content here...',
                maxLines: 8,
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Please enter notice content';
                  }
                  if (value.trim().length < 20) {
                    return 'Content must be at least 20 characters';
                  }
                  return null;
                },
                isDarkMode: isDarkMode,
              ),

              const SizedBox(height: 20),

              // Tags Field
              _buildSectionTitle('Tags (Optional)', isDarkMode, textColor),
              const SizedBox(height: 8),
              _buildTextField(
                controller: _tagsController,
                hintText: 'Enter tags separated by commas (e.g., important, exam, update)',
                maxLines: 1,
                isDarkMode: isDarkMode,
              ),

              const SizedBox(height: 20),

              // Image URL Field
              _buildSectionTitle('Image URL (Optional)', isDarkMode, textColor),
              const SizedBox(height: 8),
              _buildTextField(
                controller: TextEditingController(text: _imageUrl ?? ''),
                hintText: 'Enter image URL...',
                maxLines: 1,
                onChanged: (value) {
                  setState(() {
                    _imageUrl = value.trim().isEmpty ? null : value.trim();
                  });
                },
                isDarkMode: isDarkMode,
              ),

              const SizedBox(height: 20),

              // Important Notice Toggle
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: isDarkMode ? const Color(0xFF1F1F1F) : Colors.white,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: isDarkMode ? Colors.grey[700]! : Colors.grey[300]!,
                  ),
                ),
                child: Row(
                  children: [
                    Icon(
                      Icons.priority_high,
                      color: _isImportant ? Colors.red : Colors.grey,
                      size: 24,
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Mark as Important',
                            style: TextStyle(
                              color: textColor,
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                          const SizedBox(height: 4),
                          Text(
                            'Important notices will be highlighted',
                            style: TextStyle(
                              color: isDarkMode ? Colors.grey[400] : Colors.grey[600],
                              fontSize: 14,
                            ),
                          ),
                        ],
                      ),
                    ),
                    Switch(
                      value: _isImportant,
                      onChanged: (value) {
                        setState(() {
                          _isImportant = value;
                        });
                      },
                      activeColor: Colors.red,
                    ),
                  ],
                ),
              ),

              const SizedBox(height: 20),

              // Priority Dropdown
              _buildSectionTitle('Priority Level', isDarkMode, textColor),
              const SizedBox(height: 8),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
                decoration: BoxDecoration(
                  color: isDarkMode ? const Color(0xFF1F1F1F) : Colors.white,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: isDarkMode ? Colors.grey[700]! : Colors.grey[300]!,
                  ),
                ),
                child: DropdownButtonHideUnderline(
                  child: DropdownButton<NoticePriority>(
                    value: _priority,
                    isExpanded: true,
                    dropdownColor: isDarkMode ? const Color(0xFF1F1F1F) : Colors.white,
                    onChanged: (NoticePriority? newValue) {
                      if (newValue != null) {
                        setState(() {
                          _priority = newValue;
                        });
                      }
                    },
                    items: NoticePriority.values.map<DropdownMenuItem<NoticePriority>>((NoticePriority priority) {
                      Color priorityColor;
                      String priorityText;
                      switch (priority) {
                        case NoticePriority.high:
                          priorityColor = Colors.red;
                          priorityText = 'High Priority';
                          break;
                        case NoticePriority.normal:
                          priorityColor = Colors.green;
                          priorityText = 'Normal Priority';
                          break;
                        case NoticePriority.low:
                          priorityColor = Colors.orange;
                          priorityText = 'Low Priority';
                          break;
                      }
                      return DropdownMenuItem<NoticePriority>(
                        value: priority,
                        child: Row(
                          children: [
                            Container(
                              width: 12,
                              height: 12,
                              decoration: BoxDecoration(
                                color: priorityColor,
                                borderRadius: BorderRadius.circular(6),
                              ),
                            ),
                            const SizedBox(width: 12),
                            Text(
                              priorityText,
                              style: TextStyle(
                                color: textColor,
                                fontSize: 14,
                              ),
                            ),
                          ],
                        ),
                      );
                    }).toList(),
                  ),
                ),
              ),

              const SizedBox(height: 20),

              // Category Dropdown
              _buildSectionTitle('Category', isDarkMode, textColor),
              const SizedBox(height: 8),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
                decoration: BoxDecoration(
                  color: isDarkMode ? const Color(0xFF1F1F1F) : Colors.white,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: isDarkMode ? Colors.grey[700]! : Colors.grey[300]!,
                  ),
                ),
                child: DropdownButtonHideUnderline(
                  child: DropdownButton<NoticeCategory>(
                    value: _category,
                    isExpanded: true,
                    dropdownColor: isDarkMode ? const Color(0xFF1F1F1F) : Colors.white,
                    onChanged: (NoticeCategory? newValue) {
                      if (newValue != null) {
                        setState(() {
                          _category = newValue;
                        });
                      }
                    },
                    items: NoticeCategory.values.map<DropdownMenuItem<NoticeCategory>>((NoticeCategory category) {
                      IconData categoryIcon;
                      String categoryText;
                      switch (category) {
                        case NoticeCategory.exam:
                          categoryIcon = Icons.quiz;
                          categoryText = 'Exam';
                          break;
                        case NoticeCategory.assignment:
                          categoryIcon = Icons.assignment;
                          categoryText = 'Assignment';
                          break;
                        case NoticeCategory.event:
                          categoryIcon = Icons.event;
                          categoryText = 'Event';
                          break;
                        case NoticeCategory.general:
                          categoryIcon = Icons.info;
                          categoryText = 'General';
                          break;
                        case NoticeCategory.announcement:
                          categoryIcon = Icons.campaign;
                          categoryText = 'Announcement';
                          break;
                        case NoticeCategory.academic:
                          categoryIcon = Icons.school;
                          categoryText = 'Academic';
                          break;
                      }
                      return DropdownMenuItem<NoticeCategory>(
                        value: category,
                        child: Row(
                          children: [
                            Icon(
                              categoryIcon,
                              color: Colors.blue,
                              size: 18,
                            ),
                            const SizedBox(width: 12),
                            Text(
                              categoryText,
                              style: TextStyle(
                                color: textColor,
                                fontSize: 14,
                              ),
                            ),
                          ],
                        ),
                      );
                    }).toList(),
                  ),
                ),
              ),

              const SizedBox(height: 32),

              // Submit Button
              SizedBox(
                width: double.infinity,
                height: 56,
                child: ElevatedButton(
                  onPressed: _isLoading ? null : _submitNotice,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    foregroundColor: Colors.white,
                    elevation: 4,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                  ),
                  child: _isLoading
                      ? const Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(
                                strokeWidth: 2,
                                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                              ),
                            ),
                            SizedBox(width: 12),
                            Text(
                              'Adding Notice...',
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ],
                        )
                      : Text(
                          _isEditing ? 'Update Notice' : 'Publish Notice',
                          style: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                ),
              ),

              const SizedBox(height: 20),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSectionTitle(String title, bool isDarkMode, Color textColor) {
    return Text(
      title,
      style: TextStyle(
        color: textColor,
        fontSize: 16,
        fontWeight: FontWeight.w600,
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String hintText,
    required int maxLines,
    String? Function(String?)? validator,
    void Function(String)? onChanged,
    required bool isDarkMode,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: isDarkMode ? const Color(0xFF1F1F1F) : Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isDarkMode ? Colors.grey[700]! : Colors.grey[300]!,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: TextFormField(
        controller: controller,
        maxLines: maxLines,
        validator: validator,
        onChanged: onChanged,
        style: TextStyle(
          color: isDarkMode ? Colors.white : Colors.black,
          fontSize: 16,
        ),
        decoration: InputDecoration(
          hintText: hintText,
          hintStyle: TextStyle(
            color: isDarkMode ? Colors.grey[400] : Colors.grey[500],
          ),
          border: InputBorder.none,
          contentPadding: const EdgeInsets.all(16),
        ),
      ),
    );
  }
}
